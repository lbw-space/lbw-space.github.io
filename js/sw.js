const cacheDomain=["fonts.googleapis.com","npm.webcache.cn","unpkg.com","fastly.jsdelivr.net","cdn.jsdelivr.net"];async function cacheRequest(e,t){try{const t=await fetch(e),s=await caches.open(VERSION);return/^https?:$/i.test(new URL(e.url).protocol)?(s.put(e,t.clone()),t):t}catch(s){const c=await fetch(e,t),n=await caches.open(VERSION);return/^https?:$/i.test(new URL(e.url).protocol)?(n.put(e,c.clone()),c):c}}async function respondRequest(e,t){const s=await caches.match(e);return s||cacheRequest(e,t)}self.addEventListener("install",(e=>{console.log(`Service Worker ${VERSION} installing.`),e.waitUntil(caches.open(VERSION).then((e=>e.addAll(preCache))))})),self.addEventListener("fetch",(e=>{const t=new URL(e.request.url);if(cacheDomain.includes(t.hostname))e.respondWith(respondRequest(e.request));else if("POST"===e.request.method||"GET"===e.request.method&&t.search)try{e.respondWith(fetch(e.request))}catch(t){e.respondWith(fetch(e.request,{mode:"no-cors"}))}else e.respondWith(respondRequest(e.request,{mode:"no-cors"}))})),self.addEventListener("activate",(e=>{e.waitUntil(caches.keys().then((e=>Promise.all(e.map((e=>{if(VERSION!==e)return console.log(`Service Worker: deleting old cache ${e}`),caches.delete(e)})))))),console.log(`Service Worker ${VERSION} activated.`)})),self.addEventListener("message",(e=>{console.log("Service Worker: message received"),"skipWaiting"===e.data&&self.skipWaiting()}));